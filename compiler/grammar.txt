program : module;

expressionListOrEmpty : "(" expressionList ")"
                      | empty
                      ;

simpleType  : basicType
            | IDENTIFIER expressionListOrEmpty
            ;

basicType : "BIT"
          | "TS"
          | "OC"
          ;

expressionList  : expressionList "," expression
                | expression
                ;

parenList : parenList "[" expression "]"
          | empty
          ;

type  : parenList simpleType;

constDeclaration  : IDENTIFIER ":=" expression ";";

varDeclaration  : idList ":" type ";";

idList  : idList "," IDENTIFIER
        | IDENTIFIER
        ;

selector  : "." IDENTIFIER
          | "." INTEGER
          | "[" expression "]"
          ;

selectorList  : selectorList selector
              | empty
              ;

factor  : IDENTIFIER selectorList
        | LOGICVALUE
        | INTEGER
        | "~" factor
        | "â†‘" factor
        | "(" expression ")"
        | "MUX" "(" expression ":" expression "," expression ")"
        | "MUX" "(" expression "," expression ":" expression "," expression ":" expression "," expression ")"
        | "REG" "(" expression ")"
        | "REG" "(" expression "," expression ")"
        | "LATCH" "(" expression "," expression ")"
        | "SR" "(" expression "," expression ")"
        ;

op1 : "*"
    | "/"
    | "DIV"
    | "MOD"
    ;

term  : term op1 factor
      | factor
      ;

op2 : "+"
    | "-"
    ;

expression  : expression op2 term
            | term
            ;

assignment  : IDENTIFIER selectorList ":=" expression;

op3 : "="
    | "#"
    | "<"
    | "<="
    | ">"
    | ">="
    ;

relation  : expression op3 expression;

elsifStatement  : "ELSIF" relation "THEN" statementSequence;

elsifStatementList  : elsifStatementList elsifStatement
                    | empty
                    ;

elseStatementOrEmpty  : "ELSE" statementSequence
                      | empty
                      ;

ifStatement : "IF" relation "THEN" statementSequence
              elsifStatementList
              elseStatementOrEmpty
              "END"
            ;

forStatement  : "FOR" IDENTIFIER ":=" expression ".." expression "DO" statementSequence "END";

statement : assignment
          | unitAssignment
          | ifStatement
          | forStatement
          ;

statementSequence : statementSequence ";" statement
                  | statement
                  ;

typeDeclarationList     : typeDeclarationList typeDeclaration ";"
                        | empty
                        ;

constDeclarationList    : constDeclarationList constDeclaration
                        | empty
                        ;

constDeclarationOrEmpty : "CONST" constDeclarationList
                        | empty
                        ;

varDeclarationList      : varDeclarationList varDeclaration
                        | empty
                        ;

inDeclarationOrEmpty    : "IN" varDeclarationList
                        | empty
                        ;

inoutDeclarationOrEmpty : "INOUT" varDeclarationList
                        | empty
                        ;

outDeclarationOrEmpty   : "OUT" varDeclarationList
                        | empty
                        ;

varDeclarationOrEmpty   : "VAR" varDeclarationList
                        | empty
                        ;

beginDeclarationOrEmpty : "BEGIN" statementSequence
                        | empty
                        ;

module  : "MODULE" IDENTIFIER ";"
          typeDeclarationList
          constDeclarationOrEmpty
          inDeclarationOrEmpty
          inoutDeclarationOrEmpty
          outDeclarationOrEmpty
          varDeclarationOrEmpty
          beginDeclarationOrEmpty
          "END" IDENTIFIER "."
        ;

expressionOrEmpty : expression
                  | empty
                  ;

formalParenList   : formalParenList "[" expressionOrEmpty "]"
                  | empty
                  ;

formalType : formalParenList "BIT";

formalBusType : formalParenList "TS"
              | formalParenList "OC"
              ;

asteriskOrEmpty : "*"
                | empty
                ;

idListOrEmpty   : "(" idList ")"
                | empty
                ;

formalTypeList  : formalTypeList idList ":" formalType ";"
                | empty
                ;

inFormalDeclarationOrEmpty  : "IN" formalTypeList
                            | empty
                            ;

formalBusTypeList : formalBusTypeList idList ":" formalBusType ";"
                  | empty
                  ;

inoutFormalDeclarationOrEmpty : "INOUT" formalBusTypeList
                              | empty
                              ;

typeDeclaration : "TYPE" IDENTIFIER asteriskOrEmpty idListOrEmpty ";"
                  constDeclarationOrEmpty
                  inFormalDeclarationOrEmpty
                  inoutFormalDeclarationOrEmpty
                  outDeclarationOrEmpty
                  varDeclarationOrEmpty
                  beginDeclarationOrEmpty
                  "END" IDENTIFIER
                ;

unitAssignment  : IDENTIFIER selectorList "(" expressionList ")";
